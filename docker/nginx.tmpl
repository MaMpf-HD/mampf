{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}
{{ $debug_all := $.Env.DEBUG }}

{{ define "container_specific_locations" }}
	{{ $networks := .Networks }}
    {{ $port := .Port }}
    {{ $server_found := "false" }}
    {{ range $container := .Containers }}
        {{ range $knownNetwork := $networks }}
            {{ range $containerNetwork := $container.Networks }}
                {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
    # {{ $container.Name }}
    location /{{ $container.Name }} {
        internal;
        gunzip on;
        proxy_pass 'http://{{ $containerNetwork.IP }}:{{ $port }}/';
    }
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}

{{ define "metric_location" }}
    location {{ .Endpoint }} {
        types { } default_type "text/plain; charset=utf-8";
	{{ $networks := .Networks }}
    {{ $port := .Port }}
    {{ $server_found := "false" }}
    {{ range $container := .Containers }}
        {{ range $knownNetwork := $networks }}
            {{ range $containerNetwork := $container.Networks }}
                {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
                    {{ $server_found = "true" }}
        # {{ $container.Name }}
        echo_location_async '/{{ $container.Name }}/metrics';
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
    {{ if (eq $server_found "false") }}
        # Fallback entry
        return 200 '';
    {{ end }}
    }
{{ end }}

{{ define "upstream" }}
	upstream {{ .Upstream }} {
	{{ $networks := .Networks }}
    {{ $port := .Port }}
    {{ $server_found := "false" }}
    {{ range $container := .Containers }}
        {{ range $knownNetwork := $networks }}
            {{ range $containerNetwork := $container.Networks }}
                {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
                    {{ $server_found = "true" }}
        # {{ $container.Name }}
        server {{ $containerNetwork.IP }}:{{ $port }} max_fails=3 fail_timeout=10;
                {{ end }}
            {{ end }}
        {{ end }}
    {{ end }}
    {{ if (eq $server_found "false") }}
        # Fallback entry
        server 127.0.0.1 down;
    {{ end }}
    }
{{ end }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

types {
    text/html                             html htm shtml;
    text/css                              css;
    text/xml                              xml;
    text/vtt                              vtt;
    image/gif                             gif;
    image/jpeg                            jpeg jpg;
    application/javascript                js;
    application/atom+xml                  atom;
    application/rss+xml                   rss;

    text/mathml                           mml;
    text/plain                            txt;
    text/vnd.sun.j2me.app-descriptor      jad;
    text/vnd.wap.wml                      wml;
    text/x-component                      htc;

    image/png                             png;
    image/tiff                            tif tiff;
    image/vnd.wap.wbmp                    wbmp;
    image/x-icon                          ico;
    image/x-jng                           jng;
    image/x-ms-bmp                        bmp;
    image/svg+xml                         svg svgz;
    image/webp                            webp;

    application/font-woff                 woff;
    application/java-archive              jar war ear;
    application/json                      json;
    application/mac-binhex40              hqx;
    application/msword                    doc;
    application/pdf                       pdf;
    application/postscript                ps eps ai;
    application/rtf                       rtf;
    application/vnd.apple.mpegurl         m3u8;
    application/vnd.ms-excel              xls;
    application/vnd.ms-fontobject         eot;
    application/vnd.ms-powerpoint         ppt;
    application/vnd.wap.wmlc              wmlc;
    application/vnd.google-earth.kml+xml  kml;
    application/vnd.google-earth.kmz      kmz;
    application/x-7z-compressed           7z;
    application/x-cocoa                   cco;
    application/x-java-archive-diff       jardiff;
    application/x-java-jnlp-file          jnlp;
    application/x-makeself                run;
    application/x-perl                    pl pm;
    application/x-pilot                   prc pdb;
    application/x-rar-compressed          rar;
    application/x-redhat-package-manager  rpm;
    application/x-sea                     sea;
    application/x-shockwave-flash         swf;
    application/x-stuffit                 sit;
    application/x-tcl                     tcl tk;
    application/x-x509-ca-cert            der pem crt;
    application/x-xpinstall               xpi;
    application/xhtml+xml                 xhtml;
    application/xspf+xml                  xspf;
    application/zip                       zip;
    application/wasm                      wasm;

    application/octet-stream              bin exe dll;
    application/octet-stream              deb;
    application/octet-stream              dmg;
    application/octet-stream              iso img;
    application/octet-stream              msi msp msm;

    application/vnd.openxmlformats-officedocument.wordprocessingml.document    docx;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet          xlsx;
    application/vnd.openxmlformats-officedocument.presentationml.presentation  pptx;

    audio/midi                            mid midi kar;
    audio/mpeg                            mp3;
    audio/ogg                             ogg;
    audio/x-m4a                           m4a;
    audio/x-realaudio                     ra;

    video/3gpp                            3gpp 3gp;
    video/mp2t                            ts;
    video/mp4                             mp4;
    video/mpeg                            mpeg mpg;
    video/quicktime                       mov;
    video/webm                            webm;
    video/x-flv                           flv;
    video/x-m4v                           m4v;
    video/x-mng                           mng;
    video/x-ms-asf                        asx asf;
    video/x-ms-wmv                        wmv;
    video/x-msvideo                       avi;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" '
                 '"$upstream_addr"';

error_log /dev/stderr;

server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	server_tokens off;
	listen 80;
	return 503;
}

{{ $worker_containers := whereLabelValueMatches $ "de.uni-heidelberg.mathi.mampf.container-type" "worker" }}
{{ template "upstream" (dict "Upstream" "workers" "Containers" $worker_containers "Networks" $CurrentContainer.Networks "Port" "3000" "Debug" $debug_all) }}

server {
	server_name localhost;
	server_tokens off;
	listen 80 default_server;

    root /public;

    {{ $contains_with_monitoring := whereLabelValueMatches $ "de.uni-heidelberg.mathi.mampf.container-type" "worker|master" }}
    {{ template "container_specific_locations" (dict "Containers" $contains_with_monitoring "Networks" $CurrentContainer.Networks "Port" "9394") }}
    {{ template "metric_location" (dict "Endpoint" "/metrics" "Containers" $contains_with_monitoring "Networks" $CurrentContainer.Networks "Port" "9394") }}

    location / {
        client_max_body_size 4G;
        # try_files $uri $uri/ @rails;
        try_files $uri @rails;
    }

    location /__accel_redirect {
        internal;
        alias   /private;
        add_header Content-Encoding $upstream_http_content_encoding;
        gzip off;
    }

    location @rails {
        # https://gist.github.com/Djo/11374407
        # https://blog.horejsek.com/nginx-x-accel-explained/
        proxy_pass http://workers;
        proxy_set_header  X-Accel-Mapping       /private=/__accel_redirect;
        proxy_read_timeout 240s;
        proxy_send_timeout 240s;

        # HTTP 1.1 support
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $proxy_connection;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
        # proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
        proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
        proxy_set_header X-Original-URI $request_uri;

        # Mitigate httpoxy attack (see README for details)
        proxy_set_header Proxy "";
    }
}
