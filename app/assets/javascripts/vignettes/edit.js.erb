$(document).on("turbolinks:load", function () {
  const vignetteSlideList = $("#vignettes-slides-accordion");
  createSortableVignetteSlides(vignetteSlideList);
  registerVignetteSlideListeners(vignetteSlideList);
  registerNewSlideButtonListener(vignetteSlideList);
});

function createSortableVignetteSlides(vignetteSlideList) {
  Sortable.create(vignetteSlideList.get(0), {
    filter: ".accordion-collapse",
    animation: 150,
    onEnd: function (_evt) {
      // console.log(`Moved element from ${evt.oldIndex} to ${evt.newIndex}`);
      // TODO: send a request to update the order of the slides in the database
      // TODO: see more options here:
      // https://github.com/SortableJS/Sortable?tab=readme-ov-file#options
      // TODO: Watch out (!) We also get this event when oldIndex === newIndex
      // in this case we should not send a request to the server as nothing
      // changed. And the server should of course check for bounds.
      //
      // Something like that should work:
      // $.ajax({
      //   url: `/vignettes/slides/${slideId}/update_position`,
      //   method: "PATCH",
      //   data: {
      //     slide: {
      //       position: newPosition,
      //     },
      //   },
      //   success: function (response) {
      //     console.log(`Slide ${slideId} moved to position ${newPosition}`);
      //   },
      //   error: function (xhr, status, error) {
      //     console.error(`Failed to update position: ${error}`);
      //   },
      // });
    },
  });
}

function registerVignetteSlideListeners(vignetteSlideList) {
  $(vignetteSlideList).on("click", ".accordion-button", function (evt) {
    const slideId = evt.target.dataset.slideId;
    if (slideId === undefined) {
      console.error("Slide id is missing");
      return;
    }

    const questionnaireId = vignetteSlideList.attr("data-questionnaire-id");
    if (questionnaireId === undefined) {
      console.error("Questionnaire id is missing");
      return;
    }

    $.ajax({
      url: Routes.edit_vignettes_questionnaire_slide_path(questionnaireId, slideId),
      method: "GET",
      dataType: "html",
      success: function (response) {
        $(".slides-edit-form-container").html(""); // remove old forms
        $(`#slide-edit-form-container-${slideId}`).html(response);
      },
      error: function (xhr, status, error) {
        console.error(`Failed to load slide edit form: ${error}`);
      },
    });
  });
}

function registerNewSlideButtonListener(vignetteSlideList) {
  $("#vignettes-new-slide-btn").click(function () {
    $(this).prop("disabled", true);

    const questionnaireId = vignetteSlideList.attr("data-questionnaire-id");
    if (questionnaireId === undefined) {
      console.error("Questionnaire id is missing");
      return;
    }

    $.ajax({
      url: Routes.new_vignettes_questionnaire_slide_path(questionnaireId),
      method: "GET",
      dataType: "html",
      success: function (response) {
        $(vignetteSlideList).append(response);
        const newSlide = $(vignetteSlideList).children().last();
        openAccordionItem(newSlide);
      },
      error: function (xhr, status, error) {
        console.error(`Failed to load new slide form: ${error}`);
      },
    });
  });
}

function openAccordionItem($item) {
  new bootstrap.Collapse($item.find(".collapse"), {
    toggle: true,
  });
}
