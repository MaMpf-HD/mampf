(function () {
  ActiveStorage.start();

  let currentUnsavedSlideForm = null;
  let pendingSlideId = null;
  let hasUnsavedChanges = false;
  let pendingAction = null;

  // When using turbolinks, the event is not fired on redirect
  $(document).ready(function () {
    const vignetteSlideList = $("#vignettes-slides-accordion");
    const published = vignetteSlideList.data("questionnaire-published");
    if (!published) {
      createSortableVignetteSlides(vignetteSlideList);
    }
    registerVignetteSlideOpenListener();
    registerVignetteSlideLoadedListener(vignetteSlideList);
    registerNewSlideButtonListener(vignetteSlideList);

    $("#discard-changes-btn").on("click", function () {
      discardCurrentChanges();
    });

    $("#save-changes-btn").on("click", function () {
      saveCurrentChanges();
    });
  });

  function createSortableVignetteSlides(vignetteSlideList) {
    Sortable.create(vignetteSlideList.get(0), {
      animation: 150,
      filter: ".accordion-collapse",
      preventOnFilter: false,
      onEnd: function (evt) {
        if (evt.oldIndex == evt.newIndex) return;

        let questionnaire_id = evt.target.dataset.questionnaireId;
        $.ajax({
          url: `/questionnaires/${questionnaire_id}/update_slide_position`,
          method: "PATCH",
          data: {
            old_position: evt.oldIndex,
            new_position: evt.newIndex,
          },
          success: function (_response) {
            console.log(`Slide was moved from position ${evt.oldIndex} to ${evt.newIndex}`);
          },
          error: function (xhr, status, error) {
            console.error(`Failed to update position: ${error}`);
          },
        });
      },
    });
  }

  function handleUnsavedChanges(event, slideId) {
    if (!hasUnsavedChanges) return true;
    if (!event.target.id.startsWith("slides-collapse-")) return true;

    pendingSlideId = slideId;

    event.preventDefault();
    event.stopPropagation();
    $("#unsaved-changes-modal").modal("show");
    return false;
  }

  function registerVignetteSlideOpenListener() {
    $(".vignette-accordion-collapse").on("show.bs.collapse", function (e) {
      pendingAction = "show";
      return handleUnsavedChanges(e, e.target.dataset.slideId);
    });

    $(".vignette-accordion-collapse").on("hide.bs.collapse", function (e) {
      pendingAction = "hide";
      return handleUnsavedChanges(e, e.target.dataset.slideId);
    });
  }

  function discardCurrentChanges() {
    $("#unsaved-changes-modal").modal("hide");
    hasUnsavedChanges = false;
    currentUnsavedSlideForm = null;
    $("#unsaved-changes-warning").addClass("d-none");

    if (pendingAction === "show") {
      $(`#slides-collapse-${pendingSlideId}`).collapse("show");
    }
    else if (pendingAction === "hide") {
      $(`#slides-collapse-${pendingSlideId}`).collapse("hide");
    }
  }

  function saveCurrentChanges() {
    const submitButton = currentUnsavedSlideForm.find(".slide-submit-btn");
    submitButton.click();
  }

  function registerVignetteSlideLoadedListener(vignetteSlideList) {
    $(".vignette-accordion-collapse").on("shown.bs.collapse", function (evt) {
      const slideId = evt.target.dataset.slideId;
      if (slideId === undefined) {
        // multiple choice options are also collapsible
        // and trigger shown.bs.collapse
        return;
      }

      const questionnaireId = vignetteSlideList.attr("data-questionnaire-id");
      if (questionnaireId === undefined) {
        console.error("Questionnaire id is missing");
        return;
      }

      const loadingSpinner = $(`#vignette-slide-loading-${slideId}`);
      let spinnerTimeout = setTimeout(function () {
        loadingSpinner.show();
      }, 100); // avoid flickering when loading is fast

      $.ajax({
        url: Routes.edit_questionnaire_slide_path(questionnaireId, slideId),
        method: "GET",
        dataType: "html",
        success: function (response) {
          $(vignetteSlideList).find(".slides-edit-form-container").html("");
          const editFormContainer = $(`#slide-edit-form-container-${slideId}`);
          editFormContainer.hide().html(response).ready(function () {
            clearTimeout(spinnerTimeout);
            loadingSpinner.hide();
            editFormContainer.show();
          });
          setupChangeDetection();
          // Fix video attachment
          fixVideoAttachments();
        },
        error: function (xhr, status, error) {
          clearTimeout(spinnerTimeout);
          console.error(`Failed to load slide edit form: ${error}`);
        },
      });
    });
  }

  function setupChangeDetection() {
    const form = $("#slide-form");
    const unsavedChangesWarning = $("#unsaved-changes-warning");
    const formSubmitButton = form.find(".slide-submit-btn");
    const initialState = form.serialize();

    form.find("input, select, textarea, trix-editor").on("change keyup", checkForChanges);
    // form.on("change keyup", "input, select, textarea, trix-editor", checkForChanges);

    $("#vignette-multiple-choice-options").on("change keyup", "input", checkForChanges);

    function checkForChanges() {
      const currentState = form.serialize();
      if (currentState !== initialState) {
        unsavedChangesWarning.removeClass("d-none");
        formSubmitButton.removeClass("d-none");
        currentUnsavedSlideForm = form;
        hasUnsavedChanges = true;
      }
      else if (hasUnsavedChanges) {
        unsavedChangesWarning.addClass("d-none");
        formSubmitButton.addClass("d-none");
        currentUnsavedSlideForm = null;
        hasUnsavedChanges = false;
      }
    }
  }

  function registerNewSlideButtonListener(vignetteSlideList) {
    $("#vignettes-new-slide-btn").click(function () {
      $(this).prop("disabled", true);

      const questionnaireId = vignetteSlideList.attr("data-questionnaire-id");
      if (questionnaireId === undefined) {
        console.error("Questionnaire id is missing");
        return;
      }

      $.ajax({
        url: Routes.new_questionnaire_slide_path(questionnaireId),
        method: "GET",
        dataType: "html",
        success: function (response) {
          $(vignetteSlideList).append(response);
          const newSlide = $(vignetteSlideList).children().last();
          openAccordionItem(newSlide);
          setupChangeDetection();
        },
        error: function (xhr, status, error) {
          console.error(`Failed to load new slide form: ${error}`);
        },
      });
    });
  }

  function openAccordionItem($item) {
    new bootstrap.Collapse($item.find(".collapse"), {
      toggle: true,
    });
  }

  function fixVideoAttachments() {
    document.querySelectorAll("figure.attachment img").forEach(function (img) {
      // Skip if already processed
      if (img.getAttribute("data-video-fixed")) return;

      const figure = img.closest("figure");
      if (!figure) return;

      const attachmentData = figure.getAttribute("data-trix-attachment");
      if (!attachmentData) return;

      const attachment = JSON.parse(decodeURIComponent(attachmentData.replace(/&quot;/g, '"')));

      if (attachment.contentType && attachment.contentType.includes("video/")) {
        img.setAttribute("data-video-fixed", "true");

        // Create hidden video element to use first frame as preview
        const hiddenVideo = document.createElement("video");
        hiddenVideo.style.display = "none";
        hiddenVideo.preload = "metadata";
        hiddenVideo.src = attachment.url;
        document.body.appendChild(hiddenVideo);

        // When video loads, capture first frame
        hiddenVideo.onloadeddata = function () {
          hiddenVideo.currentTime = 0;
        };

        // When seeked, create thumbnail
        hiddenVideo.onseeked = function () {
          try {
            // Draw frame to canvas
            const canvas = document.createElement("canvas");
            canvas.width = hiddenVideo.videoWidth;
            canvas.height = hiddenVideo.videoHeight;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(hiddenVideo, 0, 0, canvas.width, canvas.height);

            // Set thumbnail image
            img.src = canvas.toDataURL();

            // Clean up
            document.body.removeChild(hiddenVideo);
          }
          catch (e) {
            console.warn("Failed to create video thumbnail", e);
            document.body.removeChild(hiddenVideo);
          }
        };

        hiddenVideo.onerror = function () {
          document.body.removeChild(hiddenVideo);
        };
      }
    });
  }
})();
