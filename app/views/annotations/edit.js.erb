$('#annotation-modal-content').empty()
  .append('<%= j render partial: "annotations/form"%>');
$('#annotation-modal').modal('show');

var submitButton = document.getElementById('annotation-modal-submit-button');
var $postAsComment = $('#annotation_post_as_comment');
var posted = <%= @posted %>;

$postAsComment.on("change", function () {
  if (this.checked) {
    const $warningElement = $("#annotation-comment-warning");
    const message = constructWarningMessage();
    $warningElement.html(message);
    $warningElement.show();
  } else {
    $("#annotation-comment-warning").hide();
  }
});

function constructWarningMessage() {
  let message = $("#annotation-locales").data("warningPublishing");

  const mistakeRatio = $('#annotation_category_mistake');
  if (!mistakeRatio.is(":checked")) {
    return message;
  }

  // Mistake specific warnings
  $.ajax(Routes.num_nearby_posted_mistake_annotations_path(), {
    type: 'GET',
    dataType: 'json',
    async: false,
    data: {
      mediumId: thyme.dataset.medium,
      timestamp: video.currentTime,
      // Annotations located inside this radius (in seconds) are considered as "near"
      radius: 60,
    },
    success: function (count) {
      const locale = $('#annotation-locales');
      message += "<br>";
      if (!count) {
        message += $('#annotation-locales').data("warningMistake");
      } else if (count == 1) {
        message += locale.data("warningOneCloseAnnotation");
      } else {
        message += locale.data("warningMultipleCloseAnnotations1")
          + count + locale.data("warningMultipleCloseAnnotations2");
      }
      return message;
    },
    error: function (err) {
      console.error("Error while fetching nearby annotations");
      console.error(err);
      return message;
    }
  });

  return message;
}



/*
 * CATEGORY
 */

var categoryRadios = document.getElementById('category-radios');

categoryRadios.addEventListener('click', function (evt) {
  if (evt.target && event.target.matches("input[type='radio']")) {
    switch (evt.target.value) {
      case Category.NOTE.name:
        note();
        break;
      case Category.CONTENT.name:
        content();
        break;
      case Category.MISTAKE.name:
        mistake();
        break;
      case Category.PRESENTATION.name:
        presentation();
        break;
    }
  }
});

function note() {
  $('#annotation-category-specific').empty();
  submitButton.disabled = false;
  visibleForTeacher(false);
  postComment(false);
}

function content() {
  $('#annotation-category-specific').empty()
    .append('<%= j render partial: "annotations/form_content"%>');
  submitButton.disabled = true; // disable submit button until the content category is selected
  visibleForTeacher(true);
  postComment(false);
  var contentCategoryRadios = document.getElementById('content-category-radios');
  contentCategoryRadios.addEventListener('click', function (evt) {
    if (evt.target && event.target.matches("input[type='radio']")) {
      submitButton.disabled = false;
      switch (evt.target.value) {
        case Subcategory.DEFINITION.name:
          definition();
          break;
        case Subcategory.ARGUMENT.name:
          argument();
          break;
        case Subcategory.STRATEGY.name:
          strategy();
          break;
      }
    }
  });
  /* For the moment all three methods do the same, but as it's very likely that
     we'll implement different behaviour in the future, I havn't removed the lines
     in order to avoid code duplication. */
  function definition() {
    $('#content-specific').empty()
      .append('<%= j render partial: "annotations/form_content_further_help"%>');
  }
  function argument() {
    $('#content-specific').empty()
      .append('<%= j render partial: "annotations/form_content_further_help"%>');
  }
  function strategy() {
    $('#content-specific').empty()
      .append('<%= j render partial: "annotations/form_content_further_help"%>');
  }
}

function mistake() {
  $('#annotation-category-specific').empty();
  submitButton.disabled = false;
  visibleForTeacher(true);
  postComment(true);
}

function presentation() {
  $('#annotation-category-specific').empty();
  submitButton.disabled = false;
  visibleForTeacher(true);
  postComment(false);
}

function updatePreview() {
  var text = document.getElementById('annotation_comment').value;
  $('#annotation-modal-preview').empty();
  $('#annotation-modal-preview').append(text.replaceAll('\n', '<br>'));
  renderMathInElement(document.getElementById('annotation-modal-preview'), {
    delimiters: [
      {
        left: '$$',
        right: '$$',
        display: true
      }, {
        left: '$',
        right: '$',
        display: false
      }, {
        left: '\\(',
        right: '\\)',
        display: false
      }, {
        left: '\\[',
        right: '\\]',
        display: true
      }
    ],
    throwOnError: false
  });
}



/*
 * Auxiliary methods
 */
function visibleForTeacher(isVisible) {
  $('#annotation_visible_for_teacher').prop("checked", isVisible).trigger("change");
}

function postComment(isVisible) {
  isVisible = posted ? true : isVisible;
  $('#annotation_post_as_comment').prop("checked", isVisible).trigger("change");
}

function previewCSS(show, modalWidth, contentWidth, previewWidth) {
  var offset = parseInt($('#annotation-modal').css('left'), 10);
  if (show == true) {
    $('#annotation-modal-preview').show();
    $('#annotation-modal').css('left', '-250px');
    updatePreview();
  } else {
    $('#annotation-modal-preview').hide();
    $('#annotation-modal').css('left', '0');
  }
  $('.modal-content').css('width', modalWidth + '%');
  $('#annotation-modal-content').css('width', contentWidth + '%');
  $('#annotation-modal-preview').css('width', previewWidth + '%');
}



/* If this script is rendered by the edit method of the annotation controller:
   Select correct subcategory (this is not automatically done by the rails form
   as the content is dynamically rendered). */
var contentRadio = $('#annotation_category_content');
if (contentRadio.is(':checked')) {
  content();
  submitButton.disabled = false;
  var subcategory = document.getElementById('annotation_subcategory').textContent.replace(/[^a-z]/g, '');
  switch (subcategory) {
    case Subcategory.DEFINITION.name:
      document.getElementById('content-category-definition').checked = true;
      break;
    case Subcategory.ARGUMENT.name:
      document.getElementById('content-category-argument').checked = true;
      break;
    case Subcategory.STRATEGY.name:
      document.getElementById('content-category-strategy').checked = true;
      break;
  }
}

// render preview
var annotationComment = document.getElementById('annotation_comment');
annotationComment.addEventListener('input', function () {
  updatePreview();
});

previewCSS(false, 100, 100, 0);

// preview toggle listener
var previewToggle = document.getElementById('preview-toggle');
previewToggle.addEventListener('change', function () {
  if ($('#preview-toggle-check').is(":checked")) {
    previewCSS(true, 150, 65, 35);
  } else {
    previewCSS(false, 100, 100, 0);
  }
});

// disable post comment checkbox if annotation was already posted
if (posted) {
  postComment(true);
  postAsComment.disabled = true;
}

initBootstrapPopovers();
